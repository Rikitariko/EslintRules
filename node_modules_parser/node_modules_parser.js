const esquery = require('esquery');
let recast = require('recast');
let functionTypes = ['FunctionDeclaration', 'FunctionExpression', 'ArrowFunctionExpression'];

function findDeclaration(ast, path, object) {
  let result = [];
  let node = path;
  while (functionTypes.indexOf(node.value.type) === -1 && node.value.type !== 'Program') {
    node = node.parentPath;
  }

  if (node.value.type === 'Program')
  {return [];}

  result.push({
    object: object,
    type: node.value.type,
    name: (node.value.type === 'FunctionDeclaration') ? node.value.id.name : node.parentPath.value.id.name,
    serviceNameFormat: 'rg',
    nameId: 1,
    variables: []
  });
  result[result.length - 1].serviceNameFormat = ((result[result.length - 1].name === 'angularComponentFactory') ? 'rg' : '');

  node.value.params.forEach(function(param) {
    result[result.length - 1].variables.push(param.name);
  });

  let matches = esquery(path.value.arguments[0], 'Identifier');

  matches.forEach(function(item) {
    if (result[result.length - 1].variables.indexOf(item.name) !== -1)
    {result[result.length - 1].nameId = result[result.length - 1].variables.indexOf(item.name);}
  });
  return result;
}

function findUsage(code, declarations, pathFile) {
  let result = [];
  let arrayFunc = declarations.map(item => item.name);
  const ast = recast.parse(code, {
    parser: require('recast/parsers/babel')
  });

  recast.visit(ast, {
    visitCallExpression: function(path) {
      this.traverse(path);

      let index = arrayFunc.indexOf(path.value.callee.name);
      if (path.value.callee.type === 'Identifier' && index !== - 1) {
        result.push({
          object: declarations[index].object,
          name: declarations[index].serviceNameFormat + path.value.arguments[declarations[index].nameId].value,
          path: pathFile
        });
        result[result.length - 1].variables = [];
        result[result.length - 1].controllers = [];
      }
    }
  });
  return result;
}

module.exports.findDeclaration = findDeclaration;
module.exports.findUsage = findUsage;